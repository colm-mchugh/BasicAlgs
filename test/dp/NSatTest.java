package dp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.junit.Test;

public class NSatTest {

    @Test
    public void testSatSolveFalse() {
        int[][][] unsats = {{{1, 2, 3, 4}, {-1}, {1, 2, -3}, {1, -2}, {1, -4}},
                    {{-18, -6, -5}, {20, -9}, {9, 3, -13}, {10, -3}, {-4, 19}, {4, -3, 5}, {14, -7, -8}, {-9, 8, 17}, {-18, -9}, {4, 13, -13}, {5, -12, 14}, {13, -3, -17}, {-1, -13, 8}, {-4, 5, 20}, {7, -16, -15}, {-13, -19, -9}, {-16, -11, -1}, {-9, 10, -16}, {10, 14, -3}, {-14, 8, 18}, {-3, 10, -14}, {-5, 3, -10}, {16, -12, 3}, {19, -2}, {11, -8, 17}, {3, -2, -20}, {16, 14, -4}, {-7, 1, -3}, {18, 20, -7}, {16, 5, -4}, {11, -8, -16}, {-20, -17, -14}, {-7, -18, 3}, {16, 10, 2}, {-6, 6, 14}, {-2, -14, -5}, {2, 7, -5}, {-13, -19, 8}, {5, 12, 11}, {-5, 6}, {12, -18, 17}, {16, -20, -7}, {14, 6, 5}, {9, 6, 2}, {-3, -1, -12}, {16, -5, 9}, {13, -17}, {17, -9, 9}, {-4, 17, -3}, {-13, 9, 10}, {-4, 13, -12}, {-10, -9, -17}, {-11, 3, 2}, {13, -1, 12}, {20, 8, -8}, {2, -11, -3}, {2, 4, -17}, {-19, 18, -14}, {-6, -20, -16}, {13, -9, 8}, {17, -3, 9}, {-16, -14, 12}, {10, 18, -12}, {-15, -2, -18}, {13, -10, -11}, {-9, 13, 14}, {7, -19}, {5, 20, 2}, {-19, -12, 11}, {-12, -17, -6}, {-13, -5, 19}, {1, 5, -18}, {-15, -11, 7}, {4, -12, 16}, {-3, -2, 1}, {-4, 7, 16}, {16, 12}, {-1, -3, -19}, {-10, 5, -5}, {-7, -8, 12}},
                    {{12, 4, -9}, {6, 11, 8}, {-10, 8, 13}, {8, 3, -1}, {-11, 5, -2}, {-5, 2}, {-2, 13, -8}, {-7, 7, -11}, {11, 13, -13}, {3, -7, -8}, {-7, -2, -12}, {8, 11, -2}, {-5, -13}, {-3, -6, -10}, {10, -11, -12}, {-12, -10, 7}, {-9, 3, 4}, {-10, 7, 8}, {3, 4, 8}, {-1, -7, -4}, {-3, 13, 12}, {4, 9, -4}, {6, 12, 10}, {-12, -7, 11}, {-13, 10, 6}, {-12, -5}, {6, 9, -6}, {9, -13}, {13, 5, -1}, {13, -1, -8}, {-3, 4, -9}, {-4, 6}, {6, -13, 9}, {3, 6, -9}, {-2, -6, -4}, {-11, -4, -13}, {-11, -13, 1}, {12, -6, 7}, {2, -12, -7}, {-9, -3, 13}, {-2, 12, 1}, {7, -12, 2}, {-10, 5, -9}, {-12, 2, -7}, {-1, -2, -4}, {5, 8, 3}, {8, 3, 6}, {-12, -10}, {-4, 12, 2}, {-4, -2, -6}, {4, -12, -4}, {13, 2, -10}} 
        };
        for (int[][] unsat : unsats) {
            assert !this.solve(unsat, NSatSolver.strategy.byIndex);
            assert !this.solve(unsat, NSatSolver.strategy.byCard);
            assert !this.solve(unsat, NSatSolver.strategy.byClsSize);
        }
    }

    @Test
    public void testSatSolveTrue() {
        int[][][] sats = { 
            {{2, -1, 3}, {1, -3, -2}, {1, -3, -2}, {1, 3}, {2, -1}, {1, -2, 2}, {-1, -2, -3}, {-1, 2, -3}, {1, -1, 2}, {1, 2, -3}, {2, -3, -2}, {2, -3, -1}},
            {{-1, -3, -4}, {2, 3, -4}, {1, -2, 4}, {1, 3, 4}, {-1, 2, -3}},
            {{1, 2, 3}, {1, -2, 3}, {1, 2, -3}, {1, -2, -3}},
            {{10, 2, -1}, {-2, -6, 2}, {-3, -2, -1}, {7, -5}, {8, -2, -1}, {-4, 6, -8}, {6, 2, -4}, {-4, 3, -9}, {-3, 9, 6}, {-8, -5, 6}, {5, 10, -4}, {4, 2, -4}, {10, 9, -4}, {-1, -8, -7}, {-5, 5, -6}, {-10, -1, -4}, {3, 7}, {-8, -10, 6}, {-9, -1, 4}, {-8, 7, -5}, {-8, 1, -4}, {9, -9, -7}, {-7, 9, -5}, {10, 5, -9}, {9, -1, -10}, {5, -5, -2}, {4, 6, 7}, {-1, -5, 8}, {9, -6, -7}, {-9, -3, 10}, {-6, 1, 3}, {-4, -8, -7}, {-10, 8}, {-8, 6, -4}, {9, 5, 3}, {8, 6, -9}, {-10, 8, -2}, {10, -5}, {4, 9, -9}, {-10, -6, 2}}, 
            {{-2, -4, 4}, {-5, 5, -2}, {2, 7, 5}, {7, -5, 2}, {1, 6}, {3, -6, 1}, {-7, 6, 2}, {-3, 1, 3}, {-3, -4, -7}, {4, 5, -7}, {3, -2, 5}, {-3, 6, 7}, {-5, -4, 5}, {-7, 1, 5}, {-3, 7, 1}, {-4, -2, -6}, {4, -7}, {2, -1, 3}, {-4, -1, -2}, {4, 2, -3}, {2, 6, 3}, {6, 5, 7}, {-4, 7, -3}, {-5, -4, 4}, {-4, 2, -5}, {-4, -7, 6}, {4, -5}, {-2, -4, 5},},
            {{-2, -4, 1}, {-4, -2}, {5, -1, 1}, {4, -3, -1}, {4, 3}, {4, 3}, {1, -3}, {1, -5, 3}, {-5, 3, -2}, {5, 3, 2}, {-2, -5, 5}, {3, -2, 4}, {2, -3, -2}, {2, 4, 1}, {2, -3, -2}, {-5, 2, 1}, {1, -5, 3}, {1, -5, -1}, {-3, 5, 4}, {4, 3},},
            {{13, -6, -4}, {-2, -11, -1}, {-8, -10, 11}, {5, 11, 6}, {1, -1}, {1, -6}, {8, 2, 13}, {5, -12, 7}, {12, -7, 9}, {-10, 5, 11}, {-8, 10, 4}, {-4, 3}, {13, -2, -3}, {8, -6, -3}, {8, 7, 1}, {-11, -6, -3}, {-12, -6, 6}, {2, 10, 8}, {-8, -6, 6}, {-8, -13, 8}, {7, -3, -13}, {-10, -1, 7}, {-4, 2, -1}, {-3, 12, 2}, {5, 3, -11}, {-6, -3, 2}, {-10, -5, 9}, {-10, 12, -11}, {-3, -8, 8}, {-6, -4, -3}, {-9, 6, -10}, {-2, -10}, {3, -1, 12}, {-8, 6}, {11, 7, 5}, {-10, 4}, {-13, -12, 4}, {4, 13, -1}, {-11, -5, 10}, {6, 7, -11}, {11, -9, -3}, {-9, -1}, {10, -11, -5}, {5, 1, -1}, {5, 10, -4}, {-4, -5, 11}, {6, -4, -2}, {-10, -7, 8}, {10, 8, -13}, {10, 4, -11}, {-10, -6, 2}, {-9, 8}},
            {{1, 12, 14}, {13, 17, -8}, {4, 14, 15}, {-17, 9, -5}, {2, 5, 10}, {-5, 17}, {-11, 4}, {3, -16, 4}, {14, -16, -4}, {-6, 9, 10}, {-5, -2, -15}, {8, -11, -12}, {-8, 5, 9}, {14, -7}, {1, 7, -5}, {7, -17, -16}, {16, -6}, {-5, -2, 9}, {2, 3, 1}, {15, -14, -1}, {-3, -5, 2}, {13, -5, -4}, {-13, -6, 1}, {-17, -5, -14}, {4, 14, 3}, {-17, 16, -14}, {-17, 16, -11}, {6, -9, -8}, {10, 1, 14}, {8, -9, 16}, {16, 2}, {10, -9, -8}, {-16, 1, 12}, {14, 7, -12}, {-8, -13, -4}, {8, -12}, {15, 7, 16}, {-17, 7, -7}, {9, -15}, {12, -16, -8}, {2, -11, 15}, {15, -1, -15}, {-9, -5, -10}, {12, -7, 13}, {-9, 13, 2}, {-10, -3, 17}, {-2, -9, 11}, {-12, 10, 14}, {-1, 9, -4}, {-4, -8, -17}, {-10, 14, -2}, {3, -10, 13}, {1, 13, -15}, {2, -11, 13}, {4, 5, -12}, {2, -13, -12}, {-11, -7, 15}, {16, -12, -11}, {7, -14, -1}, {13, -3, -9}, {1, -8, -14}, {-2, 8, -9}, {5, -11, 16}, {-15, -4, -11}, {15, -4, -1}, {-1, -2, -15}, {-1, 10}, {-14, -16, -11}},
            {{-13, 18, 4}, {1, -4, 2}, {-7, -20, -15}, {13, 8, 14}, {-14, -17, 12}, {-14, -7, -1}, {-15, -11, -14}, {5, 19, -4}, {13, -10, -15}, {-7, 12, -9}, {-1, -18, -6}, {-12, -11, -5}, {-2, 13, -9}, {7, -6}, {20, -1, -14}, {20, -1, -4}, {20, -1, -3}, {-13, -15, -8}, {-19, 7, 15}, {16, 7, 1}, {-10, 2, 10}, {-1, -17, 11}, {-17, 14, -18}, {-6, -2}, {-14, 4}, {-10, -8, 16}, {-9, 6, 18}, {15, -14, 20}, {19, 4}, {2, 1, 3}, {-3, -15, 16}, {-6, -4, 5}, {-20, 20, 17}, {-1, 12, 15}, {-20, 7}, {-8, -7, -6}, {-5, 10, -2}, {-8, -19, -6}, {-4, -1, -14}, {-4, -20, 12}, {18, 11, 7}, {-18, -8, 1}, {13, -3, 5}, {-12, -6}, {-4, -1, 19}, {12, 7, -15}, {-9, -1, -20}, {5, 3, 7}, {-15, -17, -11}, {-20, -12}, {-20, 20, -12}, {17, 13, 12}, {-9, 2, -10}, {-12, -6, 1}, {15, -10, 19}, {-1, 10, 3}, {6, 2, 11}, {20, 11, 6}, {15, -7, -12}, {15, -8, 10}, {9, -7, -8}, {17, 13, 11}, {7, 20, 3}, {-5, -6, 13}, {-7, 4, 19}, {-3, 5, -4}, {-2, 8, -18}, {3, 12, -9}, {-7, -19, 14}, {-14, -18, -15}, {-18, -16, -20}, {-11, 7, 19}, {-14, -9, 10}, {-15, 4, -11}, {16, -16, 4}, {3, -3, -1}, {1, -13, 11}, {4, -11, -9}, {-17, -3, -13}, {-19, -10, 4}}
        };
        for (int[][] sat : sats) {
            assert this.solve(sat, NSatSolver.strategy.byIndex);
            assert this.solve(sat, NSatSolver.strategy.byCard);
            assert this.solve(sat, NSatSolver.strategy.byClsSize);
        }
    }

    @Test
    public void testSatSolveTrueBig() {
        String[] files = {"resources/uf20-0811.cnf", "resources/uf50-0988.cnf", "resources/uf250-086.cnf"};
        for (String file : files) {
            int[][] sat = this.read3Sat(file);
            assert this.solve(sat, NSatSolver.strategy.byIndex);
            assert this.solve(sat, NSatSolver.strategy.byCard);
        }
    }

    @Test
    public void testSatSolveFalseBig() {
        String[] files = {"resources/uuf50-0991.cnf", "resources/uuf250-034.cnf"};
        for (String file : files) {
            int[][] sat = this.read3Sat(file);
            assert !this.solve(sat, NSatSolver.strategy.byIndex);
            assert !this.solve(sat, NSatSolver.strategy.byCard);
        }
    }

    private boolean solve(int[][] clauseData, NSatSolver.strategy strat) {
        NSatSolver inst = new NSatSolver(clauseData);
        inst.run(strat);
        return inst.isIsSat();
    }

    private int[][] read3Sat(String file) {
        FileReader fr;
        int[][] data = null;
        try {
            fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line = br.readLine();
            String[] frmlData = line.trim().split("(\\s)+");
            int nVars = Integer.parseInt(frmlData[2]);
            int nClauses = Integer.parseInt(frmlData[3]);
            data = new int[nClauses][3];
            int i = 0;
            while ((line = br.readLine()) != null && i < nClauses) {
                String[] split = line.trim().split("(\\s)+");
                data[i][0] = Integer.parseInt(split[0]);
                data[i][1] = Integer.parseInt(split[1]);
                data[i][2] = Integer.parseInt(split[2]);
                i++;
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return data;
    }
}
